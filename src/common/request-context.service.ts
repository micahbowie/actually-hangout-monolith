import { Injectable } from '@nestjs/common';
import { AsyncLocalStorage } from 'async_hooks';

interface RequestContext {
  requestId: string;
  correlationId?: string;
}

/**
 * Request Context Service
 *
 * Manages request-scoped context including:
 * - requestId: Unique ID for this HTTP request
 * - correlationId: ID that tracks a logical operation across multiple requests/services
 *
 * Correlation IDs are useful for:
 * - Tracking a user action through multiple API calls
 * - Following a workflow through Temporal activities
 * - Tracing distributed operations across services
 *
 * Usage:
 * - RequestId is automatically generated by RequestIdMiddleware
 * - CorrelationId can be passed via X-Correlation-ID header
 * - Both are available in all logs via the logging interceptor
 */
@Injectable()
export class RequestContextService {
  private static asyncLocalStorage = new AsyncLocalStorage<RequestContext>();

  /**
   * Get the current request ID
   * This is unique per HTTP request
   */
  static getRequestId(): string | undefined {
    const store = this.asyncLocalStorage.getStore();
    return store?.requestId;
  }

  /**
   * Get the current correlation ID
   * This tracks a logical operation across multiple requests
   * Falls back to requestId if no correlationId is set
   */
  static getCorrelationId(): string | undefined {
    const store = this.asyncLocalStorage.getStore();
    return store?.correlationId || store?.requestId;
  }

  /**
   * Get both requestId and correlationId
   * Useful for logging and passing to downstream services
   */
  static getContext(): { requestId?: string; correlationId?: string } {
    const store = this.asyncLocalStorage.getStore();
    return {
      requestId: store?.requestId,
      correlationId: store?.correlationId || store?.requestId,
    };
  }

  /**
   * Run a callback within a request context
   * The context will be available to all async operations within the callback
   */
  static run<T>(context: RequestContext, callback: () => T): T {
    return this.asyncLocalStorage.run(context, callback);
  }

  /**
   * Set correlation ID for the current request context
   * Useful when starting a new logical operation
   */
  static setCorrelationId(correlationId: string): void {
    const store = this.asyncLocalStorage.getStore();
    if (store) {
      store.correlationId = correlationId;
    }
  }
}
